n = int(input())
pairs = []  # объявляем массив пар номер - стоимость (пока пустой)
for i in range(0, n):  # цикл для считывания пар в массив
    _str = input()  # считываем всю строку в _str
    _split = _str.split(' ')
    pair = (int(_split[0])), int(_split[1])  # создаём "пару" чисел, состоящую из перевого и второго элементов _split
    pairs.append(pair)  # добавляем полученную пару в массив пар
# теперь у нас готов массив пар, можно с ними работать
# если мы отсортируем наши пары сначала по первому числу пар, а потом по второму числу пар, мы получим ответ
# почему? вообще надо понимать такое свойство определённых сортировок, как "стабильность"
# стабильность сортировки говорит о том, что число, которое стояло изначально правее, останется правее относительно
# другого равного ему числа. Например, представим массив 2 3 1 3. Отсортировали - получили 1 2 3 3.
# Если сортировка стабильная, мы можем быть уверены, что из этих равных троек левая - та, что стояла в неотсортированном
# массиве слева, а правая - стояла в неотсортированном массиве справа. Если сортировка нестабильная, мы не можем быть в
# этом уверены, они могут перемешаться и правая тройка окажется слева, а левая - справа.
 
# собственно в питоне тут стабильная сортировка, значит мы можем быть уверены, что пара, изначально стоявшая слева,
# останется слева, нам это важно. Важно потому, что мы сначала сортируем по первому значению, которое задаёт приоритет
# при равных вторых значениях. Если распишешь на бумажке второй пример, сделаешь пары и отсортируешь стабильно, поймёшь.
pairs.sort(key=(lambda x: x[0]))  # сортируем собственно по первому значению пар, с помощью лямбда-выражения,
# лямбда - просто маленькая функция, которая возвращает сортировке число, по которому надо сортировкать, сортировка
# принимает эту функцию в параметр key, поэтому пишем так, для удобства взял тут лямбда-выражение в скобки, чтоб 
# было видно, где лямбда, а где сама функция и параметр
pairs.sort(key=lambda x: x[1], reverse=True)  # сортируем по второму значению
for i in pairs:  # выводим
    print(str(i[0]) + " " + str(i[1]))
    #Не поверите, но это всё комментировал я, чтобы вы не посчитапли, что я списываю :)
    #Соотвественно мне было не лень комментировать только это.